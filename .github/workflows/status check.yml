name: PR Build Check

on:
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  find-projects:
    runs-on: ubuntu-latest
    outputs:
      projects: ${{ steps.set-projects.outputs.projects }}
    steps:
      - uses: actions/checkout@v3

      - name: Find projects with gradlew
        id: set-projects
        shell: bash
        run: |
          # Find all gradlew files and extract their paths
          projects=$(find ./project -name "gradlew" -type f -exec dirname {} \; | sed 's|^./project/||')
          
          # Create proper JSON array
          echo "projects=$(echo $projects | jq -R 'split(" ")' -c)" >> $GITHUB_OUTPUT
          echo "Found projects: $(echo $projects | jq -R 'split(" ")' -c)"

  parallel-builds:
    needs: find-projects
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: ${{ fromJson(needs.find-projects.outputs.projects) }}
      fail-fast: false

    outputs:
      build_success: ${{ steps.set-result.outputs.success }}
      failed_projects: ${{ steps.set-result.outputs.failed_projects }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Make gradlew executable
        run: chmod +x ./project/${{ matrix.project }}/gradlew

      - name: Build with Gradle
        id: build
        continue-on-error: true
        working-directory: ./project/${{ matrix.project }}
        run: ./gradlew clean build

      - name: Set result
        id: set-result
        if: always()
        run: |
          if [ "${{ steps.build.outcome }}" == "success" ]; then
            echo "success=true" >> $GITHUB_OUTPUT
            echo "failed_projects=" >> $GITHUB_OUTPUT
          else
            echo "success=false" >> $GITHUB_OUTPUT
            echo "failed_projects=${{ matrix.project }}" >> $GITHUB_OUTPUT
          fi

  build:
    needs: parallel-builds
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check build results
        run: |
          if [[ "${{ needs.parallel-builds.outputs.build_success }}" == "false" ]]; then
            echo "::error::The following projects failed to build: ${{ needs.parallel-builds.outputs.failed_projects }}"
            exit 1
          else
            echo "All projects built successfully"
          fi
